/*
 * CSS
 * CSS라는 언어
 * Cascading Style Sheet
 * Cascading (폭포수가 흐르는 형태)
   * 부모요소의 CSS가 자식요소에 영향을 미친다
   * flow (흐름)
   * 보통 요소가 쌓이는 형태 => normal flow
 * style
   * HTML이나 XML에 디자인을 씌우는.
   * 표현을 입히는
   * 디자인으로 인해 HTML의 본연적 의미를 변경하지 마라
   * 리팩토링할 수 있는 여지가 있다고 생각하면 X
   * 테스트 케이스, 예외상황, 모듈화 (HTML / CSS)
 * sheet
   * 명세서
   * CSS에는 로직이 존재 X
   * if문 X 만약.. 요소가 레드라면... 뒷 요소를 블루 X
   * IE를 대응하지 않는다면 표현력이 무한
 */

/*
 * Fonts (Text)
   * inherit (cascading)
   * 하위 요소 전체가 폰트를 상속
   * input 요소 제외
   * button 요소 제외
   * textarea 요소 제외
 * Font는 개별 문자의 스타일을 지정
   * font-family (폰트의 집합)
   * font-size (폰트의 크기)
   * line-height (폰트의 행간)
   * letter-spacing (폰트의 자간)
   * font-weight (폰트의 굵기)
 * Text는 문단의 스타일을 지정
   * text-align (정렬)
   * whitespace (공백문자를 어떻게 처리할 지)
   * text-transform (문자 변형, 대소문자)
   * text-overflow (문자가 넘칠경우)
   * line-clamp (문자가 넘칠경우, 여러줄, 지원율 낮음)
 * @font-face : 웹 폰트
 */

body {
  /*
   * font-size
   * CSS 단위 (Units)
     * pixel (px)
       * 하나의 그래픽을 이루는 가장 작은 단위
       * default font size : 16px;
       * 맥, iOS (APPLE SD Gothic NEO)
       * 디자인에서 20px => 10px (레티나)
       * 11px
     * em
       * 자기 폰트사이즈를 기준으로 계산하는 단위
       * 1em = 폰트사이즈 = 18px
       * 계산하기 어렵다...
     * rem (root em)
       * html 폰트 사이즈를 기준으로 계산
       * 브라우저 지원율이 낮음 (IE11부터 지원)
     * % (percentage)
       * 부모요소를 기준으로 %값을 계산
       * 100% = 부모요소의 폰트사이즈 = 16px
       * 125% = 부모요소의 폰트사이즈 * 1.125 = 18px
     * pt (point), ch(숫자 0을 기준..)
   */
  font-size: 1.125em;
  /*
   * line-height
   * 행간 (행과 행 사이의 간격)
     * display: inline;
     * inline 박스는 행간을 기준으로 높이 지정
   * line-height를 지정하지 않은 경우
     * 브라우저의 normal line-height는 폰트의 1.2배 ~ 1.3배
     * 가독성은... 1.5em
   * 되도록 font-size와 line-height를 동일값으로 주는 건 권장하지 않음
     * IE에서 깨지는 케이스가 많음.
   * line-height에 pixel을 안쓰는 걸 권장
   * line-height를 지정할 경우, 폰트의 위-아래에 간격이 생김
   */
   line-height: 1.5em;
   /*
    * font-family
    * font-family는 폰트의 집합
    * <family-name>
      * 맥, iOS: APPLE SD Gothic NEO;
      * 맥(영문), iOS: San francisco;
      * 안드로이드 : Noto sans KR; -> 본고딕
      * 안드로이드(삼성) : 삼성고딕;
      * 안드로이드(LG)  : LG스마트네오2 고딕; -> APPLE SD Gothic NEO
      * 안드로이드(팬텍) : 베가고딕;
      * 안드로이드(일부 유저) : 커스텀폰트, 도돌런처;
      * 안드로이드(영문): Roboto;
      * 윈도우
      * 윈도우10 이하: 맑은고딕, 나눔고딕;
    * <generic-name>
      * serif (명조, 획이 있는 글꼴)
      * sans-serif (고딕, 획이 없는 글꼴)
      * monospace (고정폭폰트)
      * fantasy (판타지 폰트)
      * cursive (손글씨 폰트)
    * font-famiy: <family-name>, <generic-name>;
    */
  font-family: "Noto Sans KR", sans-serif;
  /*
   * APPLE SD Gothic NEO폰트가 있다면 그 폰트
   * 아니라면 기본 고딕폰트
   * 리눅스에서는 기본 고딕폰트
   * 윈도우에서도 기본 고딕폰트
   */
   /*
    * letter-spacing
    * 음수 가능 (-값 가능)
    * 서브픽셀(소숫점) 가능 (IE 제외)
    * 포토샵에서 -180%
    */
   letter-spacing: -0.025em;
   /*
    * font-weight
    * 폰트 굵기
    * 100 - 900
    * 100 - Thin
    * 200 - UltraLight
    * 300 - Light
    * 400 - Normal
    * 500 - medium
    * 600 - semibold
    * 700 - bold
    * 800 - extrabold
    * 900 - black
    * 폰트패밀리에서 해당 weight에 맞는 폰트를 제공하는가
    * APPLE SD Gothic NEO
    * 100 - APPLESDGothicNEO-Thin
    * 200 - APPLESDGothicNEO-UltraLight
    * 돋움
    * 400 - Dotum
    * 700 - Dotum (윈도우에서 제공, 폰트에서 제공하지 않음)
    * Droid sans fallback
    * 안드로이드 구버전에서 사용하던 전세계폰트(영어를 제외한)
    * 얘는 굵기 표현 X
    * font-weight: 600;
    * 해당폰트에서 font-weight 600을 지원하지 X
    * 가장 가까운 숫자에 맞게 font-weight처리를
    * 100 ~ 500 = 400에 싸잡아지고
    * 600 ~ 900 = 700에 싸잡아짐
    */
    font-weight: 300;

    /*
     * text 정렬
     * left : 왼쪽;
     * right: 오른쪽;
     * center: 중앙;
     * justify: 양끝정렬;
     */
}

/*
 * box-model
 * display
   * normal flow
   * 모든 요소는 기본적으로 쌓이는 구조
   * 위에서 아래로
   * 좌에서 우, 우에서 좌
   * 크게
   * block
     * block formatting context
     * 블록 서식 문맥
       * 한줄을 다 차지함
       * width를 주던, height를 주던,
         자신이 가질 수 있는 한 줄을 다 가짐
       * 크기(지오메트리, 표면, 평면) 계산 로직
         * (너비) = (width) 
         + (padding-left, padding-right) 
         + (border-left, border-right)
         * (높이) = (height) 
         + (padding-top, padding-bottom) 
         + (border-top, border-bottom)
   * inline
     * inline formatting context
     * 인라인 서식 문맥
       * 한줄을 다 차지하지 않음
       * 텍스트와 동일하게 취급
     * 크기 계산 로직
       * 비주얼적 계산
         * block formatting context와 똑같음
         * line-height를 계산에 포함
           * font-size가 line-height와 동일하다면
           * font-size에 비례한 normal line-height
       * 실제크기
         * 너비 : 콘텐츠 크기 + (padding-left, padding-right)
         * 높이 : line-height
   * inline-block
     * 한줄을 다 차지하지 않음
     * 텍스트와 동일하게 취급 하는데
     * block처럼 width, height, padding, 등등을 계산
 */
p {
  padding: 0 50px;
  width: 740px;
  box-sizing: border-box;
}
/*
 * float
 * float 자체는 이미지를 왼쪽, 혹은 오른쪽에 붙이는 CSS 속성
 * float의 성질이 왼쪽 혹은 오른쪽으로 붙일 수 있으니,
   이걸로 레이아웃을 짜보자 = float layout
 */
.align-left {
  float: left;
  width: 300px;
  padding: 30px;
  margin-left: -50px;
}
.lst-menu li {
  float: left;
  padding: 15px;
  /* 
   * list-style
   * 리스트아이템 앞에 있는 불렛 설정
   * disc, square
   */
  list-style: none;
}

/*
 * clearfix
 * float된 요소의 높이를 알고싶을 때 사용하는 CSS 테크닉
 */

.clearfix:after {
  content: '';
  display: block;
  /*
   * clear 속성
   * 나는 더이상 float의 속박에서 벗어나고 싶어.
   */
  clear: both;
}














 /**/